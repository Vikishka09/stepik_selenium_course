**Открыть виртуальное окружение:
environments\selenium_env\Scripts\activate.bat

**Выйти из окружения:
environments\selenium_env\Scripts\deactivate.bat

**Запустить интерпритатор:
python

**Выйти из интерпритатора:
exit()

**Создание папки:
mkdir

**Закрыть браузер после исполнения скрипта(процесс висит после закрытия окна браузера вручную):
browser.quit()
использовать конструкцию try/finally (типа if/else)

from selenium import webdriver
from selenium.webdriver.common.by import By

link = "http://suninjuly.github.io/simple_form_find_task.html"

try:
    browser = webdriver.Chrome()
    browser.get(link)
    button = browser.find_element(By.ID, "submit_button")
    button.click()

finally:
    # закрываем браузер после всех манипуляций
    browser.quit()

**Кликнуть по ссылке:
link.click()

**Отправить значение:
send_keys()

**Получить текст, который находится между тегами:
.text

**Получить значение атрибута:
get_attribute()

** Работа со списками:
from selenium.webdriver.support.ui import Select #Импортировать класс Select
select = Select(browser.find_element(By.TAG_NAME, "select")) #найти элемент список и кликнуть
select.select_by_value("1") # ищем элемент с текстом "Python"
select.select_by_visible_text("text") #ищем по тексту
select.select_by_index(index) #ищем по индексу, начиная с 0

** Метод execute_script:
С помощью метода execute_script можно выполнить программу, написанную на языке JavaScript,
как часть сценария автотеста в запущенном браузере
browser = webdriver.Chrome()
browser.execute_script("alert('Robots at work');") #вызываем алерт(всплывающее окно) на JavaScript
Можно с помощью этого метода выполнить сразу несколько инструкций, перечислив их через точку с запятой.
Изменим сначала заголовок страницы, а затем вызовем alert:
browser.execute_script("document.title='Script executing';alert('Robots at work');")

**Если элемент чем-то перекрыт, до него нужно скроллить:
скрипт на языке JavaScript "return arguments[0].scrollIntoView(true);"
пример:
button = browser.find_element_by_tag_name("button")
browser.execute_script("return arguments[0].scrollIntoView(true);", button) #в метод передали скрипт и элемент, до которого нужно скроллить
button.click()

**Модуль os для работы с операционной системой:
Пример кода, который позволяет указать путь к файлу 'file.txt', находящемуся в той же папке, что и скрипт, который вы запускаете:
import os
current_dir = os.path.abspath(os.path.dirname(__file__))    # получаем путь к директории текущего исполняемого файла
file_path = os.path.join(current_dir, 'file.txt')           # добавляем к этому пути имя файла
element.send_keys(file_path)
Элемент в форме, который выглядит, как кнопка добавления файла, имеет атрибут type="file".
Мы должны сначала найти этот элемент с помощью селектора, а затем применить к нему метод send_keys(file_path)

**Работа с алертами:
alert = browser.switch_to.alert
alert.accept() #Принять (нажать ок)

confirm.dismiss() #Отказ (отмена)

prompt = browser.switch_to.alert
prompt.send_keys("My answer") #ввести текст в промт
prompt.accept()

**Переход на новую вкладку браузера:
browser.switch_to.window(window_name)
Чтобы узнать имя новой вкладки, нужно использовать метод window_handles, который возвращает массив имён всех вкладок.
Зная, что в браузере теперь открыто две вкладки, выбираем вторую вкладку:
new_window = browser.window_handles[1]
Также мы можем запомнить имя текущей вкладки, чтобы иметь возможность потом к ней вернуться:
first_window = browser.window_handles[0]

**Настройка ожиданий Selenium Waits:
Implicit Waits - неявные ожидания, пишем 1 раз, выполняется перед каждой командой
browser.implicitly_wait(5)
Explicit Waits - явные ожидания (например, ждём пока кнопка станет кликабельной)
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium import webdriver

browser = webdriver.Chrome()

browser.get("http://suninjuly.github.io/wait2.html")

# говорим Selenium проверять в течение 5 секунд, пока кнопка не станет кликабельной
button = WebDriverWait(browser, 5).until(
        EC.element_to_be_clickable((By.ID, "verify"))
    )
button.click()
message = browser.find_element(By.ID, "verify_message")

assert "successful" in message.text

Есть много других правил, которые позволяют реализовать необходимые ожидания:
title_is
title_contains
presence_of_element_located
visibility_of_element_located
visibility_of
presence_of_all_elements_located
text_to_be_present_in_element
text_to_be_present_in_element_value
frame_to_be_available_and_switch_to_it
invisibility_of_element_located
element_to_be_clickable
staleness_of
element_to_be_selected
element_located_to_be_selected
element_selection_state_to_be
element_located_selection_state_to_be
alert_is_present

# говорим Selenium проверять в течение 5 секунд пока кнопка станет неактивной
button = WebDriverWait(browser, 5).until_not(
        EC.element_to_be_clickable((By.ID, "verify"))